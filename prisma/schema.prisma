// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(cuid())
  email                   String      @unique
  username                String      @unique
  password                String
  name                    String?
  role                    Role        @default(USER)
  status                  UserStatus  @default(PASSENGER)
  profileImage            String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  Vehicle                 Vehicle[]
  Ride                    Ride[]
  complaintsAsComplainee  Complaint[] @relation("ComplaineeComplaints")
  complaintsAsComplainant Complaint[] @relation("ComplainantComplaints")
  bookedRides             Booking[]

  @@map("users") // follow naming conventions for relational dbs, nothing important
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  PASSENGER
  DRIVER
}

model Vehicle {
  id           String      @id @default(cuid())
  userID       String
  user         User        @relation(fields: [userID], references: [id])
  make         String
  model        String
  // seats        Int
  year         Int
  type         VehicleType @default(SEDAN)
  licensePlate String      @unique
  createdAt    DateTime    @default(now())
  Ride         Ride[]
  seats        Seat[]

  @@map("vehicles")
}

model Seat {
  id         String    @id @default(cuid())
  vehicleID  String
  vehicle    Vehicle   @relation(fields: [vehicleID], references: [id])
  seatNumber Int // Seat position or identifier
  isPremium  Boolean   @default(false) // Marks seat as premium or not
  Booking    Booking[]

  @@map("seats")
}

enum VehicleType {
  SUV
  VAN
  SEDAN
  COUPE
}

model Ride {
  id           String      @id @default(cuid())
  driverID     String
  driver       User        @relation(fields: [driverID], references: [id])
  vehicleID    String
  vehicle      Vehicle     @relation(fields: [vehicleID], references: [id])
  fare         Float
  premiumFare  Float?
  createdAt    DateTime    @default(now())
  status       RideStatus  @default(SCHEDULED)
  scheduledFor DateTime
  elapsedTime  Int?
  route        Route?
  Complaint    Complaint[]
  bookings     Booking[]

  @@map("rides")
}

model Booking {
  id       String   @id @default(cuid())
  userID   String
  user     User     @relation(fields: [userID], references: [id])
  rideID   String
  ride     Ride     @relation(fields: [rideID], references: [id])
  bookedAt DateTime @default(now())
  seatID   String
  seat     Seat     @relation(fields: [seatID], references: [id])
  farePaid Float

  @@unique([rideID, seatID], name: "rideID_seatID")
  @@unique([userID, rideID], name: "userID_rideID")
  @@map("bookings")
}

enum RideStatus {
  SCHEDULED
  COMPLETED
  ENROUTE
  CANCELLED
}

model Route {
  id     String @id @default(cuid())
  rideID String @unique
  ride   Ride   @relation(fields: [rideID], references: [id])
  to     String
  from   String

  @@map("routes")
}

model Complaint {
  id            String          @id @default(cuid())
  subject       String
  description   String?
  complaineeID  String
  complainantID String
  createdAt     DateTime        @default(now())
  rideID        String
  status        ComplaintStatus @default(PENDING)
  complainee    User            @relation("ComplaineeComplaints", fields: [complaineeID], references: [id])
  complainant   User            @relation("ComplainantComplaints", fields: [complainantID], references: [id])
  ride          Ride            @relation(fields: [rideID], references: [id])

  @@map("complaints")
}

enum ComplaintStatus {
  PENDING
  RESOLVED
  DISMISSED
}
